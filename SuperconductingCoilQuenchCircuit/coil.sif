! A test case for circuits to power a superconducting magnet (ramp-up, see coil_extraction.sif for extraction)
!
! Test case authors: Eelis Takala, Frederic Trillaud
! Original date: October 2020
! eelis.takala@gmail.com, ftrillaudp@gmail.com
INCLUDE coil-circuits.definitions
Header
  CHECK KEYWORDS Warn
  Mesh DB "." "MESH"
  Results Directory "RESU"
End
Simulation
  Coordinate System = String "Cartesian 3D"
  Coordinate Mapping(3) = 1 2 3
  Simulation Type = String "Transient"
  Steady State Max Iterations = 1
  TimeStepping Method = BDF
  BDF Order = 1
  ! --- Coil area A = 0.0064 m^2, N = 8153, Je = 1.274e8 A/m^2, NI = Je*A = 815360 A-t, and I = 100.007 A
  $ I = 60 ! providing the current for enough margin
  $ ramp_rate = 1000 ! A/s
  $ ramp_time = I/ramp_rate ! time to reach the current I in [s]
  $ plateau_time = 1
  $ nof_tstp_1 = 10
  $ nof_tstp_2 = 100
  $ sz_tstp_1 = ramp_time / nof_tstp_1
  $ sz_tstp_2 = plateau_time / nof_tstp_2
  Timestep Sizes(2) = Real $ sz_tstp_1 sz_tstp_2
  TimeStep Intervals(2) = Integer $ nof_tstp_1  nof_tstp_2
  Output Intervals(2) = Integer 1 1
  Output File = "result.dat"
  Max Output Level = 5
End
Constants
  Gravity(4) = 0 0 -1 9.82
  Stefan Boltzmann = 5.67e-08
  Permittivity of Vacuum = 8.8542e-12
  Permeability of Vacuum = 1.256e-6
  Boltzmann Constant = 1.3807e-23
  Unit Charge = 1.602e-19
End
Body 1
  Name = "coil"
  Target Bodies(1) = 1
  Equation = 1
  Material = 2
  Body Force = 1
  Initial Condition = 2
End
Body 2
  Name = "air"
  Target Bodies(1) = 2
  Equation = 2
  Material = 1
  Initial Condition = 1
End
Component 1    !--- Coil
  Name = String "Coil"
  Coil Type = String "test"
  Master Bodies(1) = Integer 1
  Desired Current Density = Real 1.0
  Coil Type = String stranded
  Coil Use W Vector = Logical True
  W Vector Variable Name = String "CoilCurrent e"
  ! --- Nb3Sn wire diameter of 1 mm in a coil having a cross-section: 0.08 m x 0.08 m
  Number of Turns = Real 8153.0
  Electrode Area = Real 0.0064
  !Resistance = Real 0.0
End
Material 1
  Name = "Air"
  Relative Permeability = Real 1.0
  Relative Permittivity = Real 1.0
End
Material 2
  Name = "Inductor"
  Relative Permeability = Real 1.0
  Relative Permittivity = Real 1.0
  Heat Conductivity(3,3) = Variable Temperature, Magnetic Flux Density e, Current Density e
    Real Procedure "./Fortran90/therConductivity" "getTherConductivity"
  Density = Real 9010.0 ! equivalent density used by the heat capacity
  Heat Capacity = Variable Temperature
    Real Piecewise Linear
      Include "./DATA/cp_eq.dat"
    End
  
  ! Parameters of superconducting wire and coil
  Matrix Density = Real 8960.0
  Superconductor Density = Real 7000.0
  Matrix Electric Conductivity = Real 1e8 ! lumped materials called "matrix"
  Critical Temperature = Real 16.8
  N-Value = Real 15.0
  Critical Electrical Field = Real 1e-4
  Operating Temperature = Real 4.2
  Matrix to Superconductor Ratio = Real 1.2
  Filling Factor = Real 0.9
  
  Electric Conductivity = Variable Temperature, Magnetic Flux Density e, Current Density e
    Real Procedure "./Fortran90/electricalConductivity" "getElectricalConductivity"
End
Body Force 1   !---- Source and circuit
  Name = "Source and circuit"
  ! --- Ramping-up the coil
  IS1 = Variable time; Real MATC "if (tx <= ramp_time) (ramp_rate*tx); else I;"
  
  ! Parameters to be passed to the procedure: dissipation.f90
  ! Dimension of the spherical disturbance (depends on local mesh size)
  Disturbance Size = Real 0.01
  ! Center of the spherical disturbance
  Disturbance X Center = Real 0.0
  Disturbance Y Center = Real -0.14
  Disturbance Z Center = Real 0.0
  ! Value of heat disturbance in [W/kg]
  Heat Disturbance = Real $700.0
  ! Initial time of the disturbance
  Heat Disturbance Initial Time = Real $ ramp_time+0.1*plateau_time
  ! Duration of the disturbance
  Disturbance Duration = Real 1.0
  
  Heat Source = Variable Time, Temperature, Magnetic Flux Density e, Current Density e
    Real Procedure "./Fortran90/dissipation" "getDissipation"
End
Initial Condition 1
  Name = "Initial state: magnetodynamics"
  A {e} = real 0
  A = real 0
  Jfix = real 0.0
End
Boundary Condition 1
  Name = "Air boundary"
  Target Boundaries(1) = 4
  A {e} = real 0
  A = real 0
  Jfix = real 0.0
End
Initial Condition 2
  Name = "Initial state: solids"
  AV {e} = real 0
  AV = real 0
  Jfix = real 0.0
    
  Temperature = Real 4.2
End
  
Boundary Condition 2
  Name = "Coil boundary"
  Target Boundaries(1) = 3
  Temperature = Real 4.2
End
Solver 1  !---- CoilSolver, CoilSolver
  Exec Solver = Before All
  Equation = "CoilSolver"
  Procedure = "CoilSolver" "CoilSolver"
  
  Steady State Convergence Tolerance = 1e-06 ! related to the Steady State Iterations (see Simulation)
  Linear System Solver = "Iterative"
  Linear System Preconditioning = ILU1
  Linear System Max Iterations = 500
  Linear System Convergence Tolerance = 1e-7
  Linear System Iterative Method = BiCGStab
  Linear System Residual Output = 1
  ! When we normalize, we introduce propably some divergence that
  ! does not impress the solver very much... Helmholtz projection needed?
  Normalize Coil Current = Logical True ! necessary to have a uniform current across the coil
  Fix Input Current Density = Logical True
  Nonlinear System Consistent Norm = Logical True
  Coil Closed = Logical True
  Narrow Interface = Logical True
  Save Coil Set = Logical True
  Save Coil Index = Logical True
  Calculate Elemental Fields = Logical True
  
  Coil Normal(3) = Real 0. 0. 1.
End
Solver 2  !---- CircuitsAndDynamics, CircuitsAndDynamics
   Exec Solver = Always
   Equation = Circuits
   Variable = X
   No Matrix = Logical True
   Procedure = "CircuitsAndDynamics" "CircuitsAndDynamics"
End
Solver 3  !---- MagnetoDynamics, WhitneyAVSolver
   Exec Solver = Always
   Nonlinear Pre Solvers(1) = 2
   Nonlinear Post Solvers(1) = 4
   
   Equation = "MGDynamics"
   Variable = "A"
   Procedure = "MagnetoDynamics" "WhitneyAVSolver"
   
   NonLinear System Relaxation Factor = 1
   Export Lagrange Multiplier = Logical True
   Linear System Solver = Iterative
   Linear System Iterative Method = BicgstabL
   Linear System preconditioning = none
   Linear System Convergence Tolerance = 1.e-8
   Linear System Max Iterations = 3000
   Linear System Residual Output = 10
   Linear System ILUT Tolerance=1e-8
   BicgstabL polynomial degree = 6
   Steady State Convergence Tolerance = 1e-08
End
Solver 4  !---- MagnetoAndDynamics, MagnetoDynamicsCalcFields
  Exec Solver = Always
  Equation = MGDynamicsCalc
  Procedure = "MagnetoDynamics" "MagnetoDynamicsCalcFields"
  
  Potential Variable = String "A"
  Steady State Convergence Tolerance = 1.0e-6
  
  Linear System Solver = Iterative
  Linear System Symmetric = True
  Linear System Iterative Method = CG
  Linear System Max Iterations = 5000
  Linear System Convergence Tolerance = 1.0e-6
  Linear System Preconditioning = ILU0
  Linear System ILUT Tolerance = 1.0e-3
  Linear System Abort Not Converged = False
  Linear System Residual Output = 1
  Linear System Precondition Recompute = 1
  Discontinuous Bodies = Logical True
  
  Calculate Elemental Fields = Logical True
  Calculate Current Density = Logical True
End
Solver 5
  Exec Solver = Always
  Equation = String "Heat Equation"
  Procedure = "HeatSolve" "HeatSolver"
  
  Variable = -dofs 1 Temperature
  
  Stabilize = True
  
  Steady State Convergence Tolerance = 1.0e-6
  
  Nonlinear Timestepping = Logical True
  
  Nonlinear System Convergence Tolerance = 1.0e-6
  Nonlinear System Max Iterations = 100
  Nonlinear System Newton After Iterations = 10
  Nonlinear System Newton After Tolerance = 1.0e-4
  Nonlinear System Relaxation Factor = 0.5
  !Linear System Solver = Direct
  !Linear System Direct Method = MUMPS
  Linear System Solver = Iterative
  Linear System Iterative Method = BiCGStabl
  Linear System Max Iterations = 500
  Linear System Convergence Tolerance = 1.0e-4
  BiCGstabl polynomial degree = 6
  Linear System Abort Not Converged = Logical False
  Linear System Preconditioning = ILU2 ! none
  Linear System Residual Output = 10
  Linear System Precondition Recompute = 1
End
Solver 6 !---- soft filter for the temperature field
  ! User's filter to mask the temperature field:
  ! If T < T_min (minimum temperature expected in the system) then T = T_min
  Exec Solver = Always
  Equation = String "Filter"
  Procedure = "./Fortran90/regularization" "getRegularizationSolver"
  
  Minimum Temperature = Real 4.2
End
Solver 7 !---- Check if nodes are inside the volume of the disturbance, otherwise, the program stops
  Exec Solver = Always
  Equation = String "Check Model"
  Procedure = "./Fortran90/checkMeshSize" "getCheckMeshSizeSolver"
End
Solver 8  !---- CircuitsAndDynamics, CircuitsOutput
   Exec Solver = Always
   Equation = Circuits Output
   Procedure = "CircuitsAndDynamics" "CircuitsOutput"
End
Solver 9  !---- ResultOuputSolve, ResultOuputSolver
   Exec Solver = After timestep
   Equation = "ResultOutput"
   Procedure = "ResultOutputSolve" "ResultOutputSolver"
   
   Vtu Format = Logical True
   Binary Output = Logical True
   
   Output File Name = File "coil"
   
   Save Geometry Ids = Logical True
End
Solver 10  !---- SaveData, SaveScalars (Write circuit variables to file)
   Exec Solver = After timestep
   Equation = "sv"
   Procedure = "SaveData" "SaveScalars"
   Filename = "coil.dat"
End
Equation 1
  Name = "MagnetoDynamic for coil"
  Active Solvers(8) = 1 2 3 4 5 6 7 9
  Heat Equation = Logical True
End
Equation 2
  Name = "MagnetoDynamic for air"
  Active Solvers(3) = 3 4 9
End
